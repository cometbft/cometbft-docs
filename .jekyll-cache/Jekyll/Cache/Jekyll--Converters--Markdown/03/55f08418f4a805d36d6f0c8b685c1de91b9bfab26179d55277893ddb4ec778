I"m <h1 id="quick-start">Quick Start</h1>

<h2 id="overview">Overview</h2>

<p>This is a quick start guide. If you have a vague idea about how Tendermint
works and want to get started right away, continue.</p>

<h2 id="install">Install</h2>

<h3 id="quick-install">Quick Install</h3>

<p>To quickly get Tendermint installed on a fresh
Ubuntu 16.04 machine, use <a href="https://git.io/fFfOR">this script</a>.</p>

<blockquote>
  <p>:warning: Do not copy scripts to run on your machine without knowing what they do.</p>
</blockquote>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-L</span> https://git.io/fFfOR | bash
<span class="nb">source</span> ~/.profile
</code></pre></div></div>

<p>The script is also used to facilitate cluster deployment below.</p>

<h3 id="manual-install">Manual Install</h3>

<p>For manual installation, see the <a href="/v0.37/introduction/install/">install instructions</a></p>

<h2 id="initialization">Initialization</h2>

<p>Running:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tendermint init
</code></pre></div></div>

<p>will create the required files for a single, local node.</p>

<p>These files are found in <code class="language-plaintext highlighter-rouge">$HOME/.tendermint</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> <span class="nv">$HOME</span>/.tendermint

config  data

<span class="nv">$ </span><span class="nb">ls</span> <span class="nv">$HOME</span>/.tendermint/config/

config.toml  genesis.json  node_key.json  priv_validator.json
</code></pre></div></div>

<p>For a single, local node, no further configuration is required.
Configuring a cluster is covered further below.</p>

<h2 id="local-node">Local Node</h2>

<p>Start Tendermint with a simple in-process application:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tendermint node <span class="nt">--proxy_app</span><span class="o">=</span>kvstore
</code></pre></div></div>

<blockquote>
  <p>Note: <code class="language-plaintext highlighter-rouge">kvstore</code> is a non persistent app, if you would like to run an application with persistence run <code class="language-plaintext highlighter-rouge">--proxy_app=persistent_kvstore</code></p>
</blockquote>

<p>and blocks will start to stream in:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I[01-06|01:45:15.592] Executed block                               <span class="nv">module</span><span class="o">=</span>state <span class="nv">height</span><span class="o">=</span>1 <span class="nv">validTxs</span><span class="o">=</span>0 <span class="nv">invalidTxs</span><span class="o">=</span>0
I[01-06|01:45:15.624] Committed state                              <span class="nv">module</span><span class="o">=</span>state <span class="nv">height</span><span class="o">=</span>1 <span class="nv">txs</span><span class="o">=</span>0 <span class="nv">appHash</span><span class="o">=</span>
</code></pre></div></div>

<p>Check the status with:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> localhost:26657/status
</code></pre></div></div>

<h3 id="sending-transactions">Sending Transactions</h3>

<p>With the KVstore app running, we can send transactions:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="s1">'localhost:26657/broadcast_tx_commit?tx="abcd"'</span>
</code></pre></div></div>

<p>and check that it worked with:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="s1">'localhost:26657/abci_query?data="abcd"'</span>
</code></pre></div></div>

<p>We can send transactions with a key and value too:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="s1">'localhost:26657/broadcast_tx_commit?tx="name=satoshi"'</span>
</code></pre></div></div>

<p>and query the key:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="s1">'localhost:26657/abci_query?data="name"'</span>
</code></pre></div></div>

<p>where the value is returned in hex.</p>

<h2 id="cluster-of-nodes">Cluster of Nodes</h2>

<p>First create four Ubuntu cloud machines. The following was tested on Digital
Ocean Ubuntu 16.04 x64 (3GB/1CPU, 20GB SSD). We’ll refer to their respective IP
addresses below as IP1, IP2, IP3, IP4.</p>

<p>Then, <code class="language-plaintext highlighter-rouge">ssh</code> into each machine, and execute <a href="https://git.io/fFfOR">this script</a>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-L</span> https://git.io/fFfOR | bash
<span class="nb">source</span> ~/.profile
</code></pre></div></div>

<p>This will install <code class="language-plaintext highlighter-rouge">go</code> and other dependencies, get the Tendermint source code, then compile the <code class="language-plaintext highlighter-rouge">tendermint</code> binary.</p>

<p>Next, use the <code class="language-plaintext highlighter-rouge">tendermint testnet</code> command to create four directories of config files (found in <code class="language-plaintext highlighter-rouge">./mytestnet</code>) and copy each directory to the relevant machine in the cloud, so that each machine has <code class="language-plaintext highlighter-rouge">$HOME/mytestnet/node[0-3]</code> directory.</p>

<p>Before you can start the network, you’ll need peers identifiers (IPs are not enough and can change). We’ll refer to them as ID1, ID2, ID3, ID4.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tendermint show_node_id <span class="nt">--home</span> ./mytestnet/node0
tendermint show_node_id <span class="nt">--home</span> ./mytestnet/node1
tendermint show_node_id <span class="nt">--home</span> ./mytestnet/node2
tendermint show_node_id <span class="nt">--home</span> ./mytestnet/node3
</code></pre></div></div>

<p>Finally, from each machine, run:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tendermint node <span class="nt">--home</span> ./mytestnet/node0 <span class="nt">--proxy_app</span><span class="o">=</span>kvstore <span class="nt">--p2p</span>.persistent_peers<span class="o">=</span><span class="s2">"ID1@IP1:26656,ID2@IP2:26656,ID3@IP3:26656,ID4@IP4:26656"</span>
tendermint node <span class="nt">--home</span> ./mytestnet/node1 <span class="nt">--proxy_app</span><span class="o">=</span>kvstore <span class="nt">--p2p</span>.persistent_peers<span class="o">=</span><span class="s2">"ID1@IP1:26656,ID2@IP2:26656,ID3@IP3:26656,ID4@IP4:26656"</span>
tendermint node <span class="nt">--home</span> ./mytestnet/node2 <span class="nt">--proxy_app</span><span class="o">=</span>kvstore <span class="nt">--p2p</span>.persistent_peers<span class="o">=</span><span class="s2">"ID1@IP1:26656,ID2@IP2:26656,ID3@IP3:26656,ID4@IP4:26656"</span>
tendermint node <span class="nt">--home</span> ./mytestnet/node3 <span class="nt">--proxy_app</span><span class="o">=</span>kvstore <span class="nt">--p2p</span>.persistent_peers<span class="o">=</span><span class="s2">"ID1@IP1:26656,ID2@IP2:26656,ID3@IP3:26656,ID4@IP4:26656"</span>
</code></pre></div></div>

<p>Note that after the third node is started, blocks will start to stream in
because &gt;2/3 of validators (defined in the <code class="language-plaintext highlighter-rouge">genesis.json</code>) have come online.
Persistent peers can also be specified in the <code class="language-plaintext highlighter-rouge">config.toml</code>. See <a href="/v0.37/tendermint-core/configuration/">here</a> for more information about configuration options.</p>

<p>Transactions can then be sent as covered in the single, local node example above.</p>
:ET