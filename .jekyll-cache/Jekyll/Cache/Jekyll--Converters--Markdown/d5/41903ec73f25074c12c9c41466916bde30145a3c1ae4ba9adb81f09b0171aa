I"¡+<h1 id="terraform--ansible">Terraform &amp; Ansible</h1>

<blockquote>
  <p>Note: These commands/files are not being maintained by the tendermint team currently. Please use them carefully.</p>
</blockquote>

<p>Automated deployments are done using
<a href="https://www.terraform.io/">Terraform</a> to create servers on Digital
Ocean then <a href="http://www.ansible.com/">Ansible</a> to create and manage
testnets on those servers.</p>

<h2 id="install">Install</h2>

<p>NOTE: see the <a href="https://github.com/tendermint/tendermint/blob/main/networks/remote/integration.sh">integration bash
script</a>
that can be run on a fresh DO droplet and will automatically spin up a 4
node testnet. The script more or less does everything described below.</p>

<ul>
  <li>Install <a href="https://www.terraform.io/downloads.html">Terraform</a> and
<a href="http://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html">Ansible</a>
on a Linux machine.</li>
  <li>Create a <a href="https://cloud.digitalocean.com/settings/api/tokens">DigitalOcean API
token</a> with read
and write capability.</li>
  <li>Install the python dopy package (<code class="language-plaintext highlighter-rouge">pip install dopy</code>)</li>
  <li>Create SSH keys (<code class="language-plaintext highlighter-rouge">ssh-keygen</code>)</li>
  <li>Set environment variables:</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">DO_API_TOKEN</span><span class="o">=</span><span class="s2">"abcdef01234567890abcdef01234567890"</span>
<span class="nb">export </span><span class="nv">SSH_KEY_FILE</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.ssh/id_rsa.pub"</span>
</code></pre></div></div>

<p>These will be used by both <code class="language-plaintext highlighter-rouge">terraform</code> and <code class="language-plaintext highlighter-rouge">ansible</code>.</p>

<h2 id="terraform">Terraform</h2>

<p>This step will create four Digital Ocean droplets. First, go to the
correct directory:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$GOPATH</span>/src/github.com/tendermint/tendermint/networks/remote/terraform
</code></pre></div></div>

<p>then:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform init
terraform apply <span class="nt">-var</span> <span class="nv">DO_API_TOKEN</span><span class="o">=</span><span class="s2">"</span><span class="nv">$DO_API_TOKEN</span><span class="s2">"</span> <span class="nt">-var</span> <span class="nv">SSH_KEY_FILE</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SSH_KEY_FILE</span><span class="s2">"</span>
</code></pre></div></div>

<p>and you will get a list of IP addresses that belong to your droplets.</p>

<p>With the droplets created and running, letâ€™s setup Ansible.</p>

<h2 id="ansible">Ansible</h2>

<p>The playbooks in <a href="https://github.com/tendermint/tendermint/tree/main/networks/remote/ansible">the ansible
directory</a>
run ansible roles to configure the sentry node architecture. You must
switch to this directory to run ansible
(<code class="language-plaintext highlighter-rouge">cd $GOPATH/src/github.com/tendermint/tendermint/networks/remote/ansible</code>).</p>

<p>There are several roles that are self-explanatory:</p>

<p>First, we configure our droplets by specifying the paths for tendermint
(<code class="language-plaintext highlighter-rouge">BINARY</code>) and the node files (<code class="language-plaintext highlighter-rouge">CONFIGDIR</code>). The latter expects any
number of directories named <code class="language-plaintext highlighter-rouge">node0, node1, ...</code> and so on (equal to the
number of droplets created).</p>

<p>To create the node files run:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tendermint testnet
</code></pre></div></div>

<p>Then, to configure our droplets run:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-playbook <span class="nt">-i</span> inventory/digital_ocean.py <span class="nt">-l</span> sentrynet config.yml <span class="nt">-e</span> <span class="nv">BINARY</span><span class="o">=</span><span class="nv">$GOPATH</span>/src/github.com/tendermint/tendermint/build/tendermint <span class="nt">-e</span> <span class="nv">CONFIGDIR</span><span class="o">=</span><span class="nv">$GOPATH</span>/src/github.com/tendermint/tendermint/networks/remote/ansible/mytestnet
</code></pre></div></div>

<p>Voila! All your droplets now have the <code class="language-plaintext highlighter-rouge">tendermint</code> binary and required
configuration files to run a testnet.</p>

<p>Next, we run the install role:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-playbook <span class="nt">-i</span> inventory/digital_ocean.py <span class="nt">-l</span> sentrynet install.yml
</code></pre></div></div>

<p>which as youâ€™ll see below, executes
<code class="language-plaintext highlighter-rouge">tendermint node --proxy_app=kvstore</code> on all droplets. Although weâ€™ll
soon be modifying this role and running it again, this first execution
allows us to get each <code class="language-plaintext highlighter-rouge">node_info.id</code> that corresponds to each
<code class="language-plaintext highlighter-rouge">node_info.listen_addr</code>. (This part will be automated in the future). In
your browser (or using <code class="language-plaintext highlighter-rouge">curl</code>), for every droplet, go to IP:26657/status
and note the two just mentioned <code class="language-plaintext highlighter-rouge">node_info</code> fields. Notice that blocks
arenâ€™t being created (<code class="language-plaintext highlighter-rouge">latest_block_height</code> should be zero and not
increasing).</p>

<p>Next, open <code class="language-plaintext highlighter-rouge">roles/install/templates/systemd.service.j2</code> and look for the
line <code class="language-plaintext highlighter-rouge">ExecStart</code> which should look something like:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/tendermint node <span class="nt">--proxy_app</span><span class="o">=</span>kvstore
</code></pre></div></div>

<p>and add the <code class="language-plaintext highlighter-rouge">--p2p.persistent_peers</code> flag with the relevant information
for each node. The resulting file should look something like:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Unit]
<span class="nv">Description</span><span class="o">=</span>
<span class="nv">Requires</span><span class="o">=</span>network-online.target
<span class="nv">After</span><span class="o">=</span>network-online.target

<span class="o">[</span>Service]
<span class="nv">Restart</span><span class="o">=</span>on-failure
<span class="nv">User</span><span class="o">=</span>
<span class="nv">Group</span><span class="o">=</span>
<span class="nv">PermissionsStartOnly</span><span class="o">=</span><span class="nb">true
</span><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/tendermint node <span class="nt">--proxy_app</span><span class="o">=</span>kvstore <span class="nt">--p2p</span>.persistent_peers<span class="o">=</span>167b80242c300bf0ccfb3ced3dec60dc2a81776e@165.227.41.206:26656,3c7a5920811550c04bf7a0b2f1e02ab52317b5e6@165.227.43.146:26656,303a1a4312c30525c99ba66522dd81cca56a361a@159.89.115.32:26656,b686c2a7f4b1b46dca96af3a0f31a6a7beae0be4@159.89.119.125:26656
<span class="nv">ExecReload</span><span class="o">=</span>/bin/kill <span class="nt">-HUP</span> <span class="nv">$MAINPID</span>
<span class="nv">KillSignal</span><span class="o">=</span>SIGTERM

<span class="o">[</span>Install]
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div></div>

<p>Then, stop the nodes:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-playbook <span class="nt">-i</span> inventory/digital_ocean.py <span class="nt">-l</span> sentrynet stop.yml
</code></pre></div></div>

<p>Finally, we run the install role again:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-playbook <span class="nt">-i</span> inventory/digital_ocean.py <span class="nt">-l</span> sentrynet install.yml
</code></pre></div></div>

<p>to re-run <code class="language-plaintext highlighter-rouge">tendermint node</code> with the new flag, on all droplets. The
<code class="language-plaintext highlighter-rouge">latest_block_hash</code> should now be changing and <code class="language-plaintext highlighter-rouge">latest_block_height</code>
increasing. Your testnet is now up and running :)</p>

<p>Peek at the logs with the status role:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-playbook <span class="nt">-i</span> inventory/digital_ocean.py <span class="nt">-l</span> sentrynet status.yml
</code></pre></div></div>

<h2 id="logging">Logging</h2>

<p>The crudest way is the status role described above. You can also ship
logs to Logz.io, an Elastic stack (Elastic search, Logstash and Kibana)
service provider. You can set up your nodes to log there automatically.
Create an account and get your API key from the notes on <a href="https://app.logz.io/#/dashboard/data-sources/Filebeat">this
page</a>, then:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install </span>systemd-devel <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"This will only work on RHEL-based systems."</span>
apt-get <span class="nb">install </span>libsystemd-dev <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"This will only work on Debian-based systems."</span>

go get github.com/mheese/journalbeat
ansible-playbook <span class="nt">-i</span> inventory/digital_ocean.py <span class="nt">-l</span> sentrynet logzio.yml <span class="nt">-e</span> <span class="nv">LOGZIO_TOKEN</span><span class="o">=</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ012345
</code></pre></div></div>

<h2 id="cleanup">Cleanup</h2>

<p>To remove your droplets, run:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform destroy <span class="nt">-var</span> <span class="nv">DO_API_TOKEN</span><span class="o">=</span><span class="s2">"</span><span class="nv">$DO_API_TOKEN</span><span class="s2">"</span> <span class="nt">-var</span> <span class="nv">SSH_KEY_FILE</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SSH_KEY_FILE</span><span class="s2">"</span>
</code></pre></div></div>
:ET