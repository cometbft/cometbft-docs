I"ï1<h1 id="getting-started">Getting Started</h1>

<h2 id="first-tendermint-app">First Tendermint App</h2>

<p>As a general purpose blockchain engine, Tendermint is agnostic to the
application you want to run. So, to run a complete blockchain that does
something useful, you must start two programs: one is Tendermint Core,
the other is your application, which can be written in any programming
language. Recall from <a href="../introduction/what-is-tendermint.md#abci-overview">the intro to
ABCI</a> that Tendermint Core
handles all the p2p and consensus stuff, and just forwards transactions to the
application when they need to be validated, or when theyâ€™re ready to be
executed and committed.</p>

<p>In this guide, we show you some examples of how to run an application
using Tendermint.</p>

<h3 id="install">Install</h3>

<p>The first apps we will work with are written in Go. To install them, you
need to <a href="https://golang.org/doc/install">install Go</a>, put
<code class="language-plaintext highlighter-rouge">$GOPATH/bin</code> in your <code class="language-plaintext highlighter-rouge">$PATH</code> and enable go modules. If you use <code class="language-plaintext highlighter-rouge">bash</code>,
follow these instructions:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="se">\"\$</span>HOME/go<span class="se">\"</span> <span class="o">&gt;&gt;</span> ~/.bash_profile
<span class="nb">echo export </span><span class="nv">PATH</span><span class="o">=</span><span class="se">\"\$</span>PATH:<span class="se">\$</span>GOPATH/bin<span class="se">\"</span> <span class="o">&gt;&gt;</span> ~/.bash_profile
</code></pre></div></div>

<p>Then run</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get github.com/tendermint/tendermint
<span class="nb">cd</span> <span class="nv">$GOPATH</span>/src/github.com/tendermint/tendermint
make install_abci
</code></pre></div></div>

<p>Now you should have the <code class="language-plaintext highlighter-rouge">abci-cli</code> installed; run <code class="language-plaintext highlighter-rouge">abci-cli</code> to see the list of commands:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Usage:
  abci-cli [command]

Available Commands:
  batch            run a batch of abci commands against an application
  check_tx         validate a transaction
  commit           commit the application state and return the Merkle root hash
  completion       Generate the autocompletion script for the specified shell
  console          start an interactive ABCI console for multiple commands
  deliver_tx       deliver a new transaction to the application
  echo             have the application echo a message
  help             Help about any command
  info             get some info about the application
  kvstore          ABCI demo example
  prepare_proposal prepare proposal
  process_proposal process proposal
  query            query the application state
  test             run integration tests
  version          print ABCI console version

Flags:
      --abci string        either socket or grpc (default "socket")
      --address string     address of application socket (default "tcp://0.0.0.0:26658")
  -h, --help               help for abci-cli
      --log_level string   set the logger level (default "debug")
  -v, --verbose            print the command and results as if it were a console session

Use "abci-cli [command] --help" for more information about a command.
</code></pre></div></div>

<p>Youâ€™ll notice the <code class="language-plaintext highlighter-rouge">kvstore</code> command, an example application written in Go.</p>

<p>Now, letâ€™s run an app!</p>

<h2 id="kvstore---a-first-example">KVStore - A First Example</h2>

<p>The kvstore app is a <a href="https://en.wikipedia.org/wiki/Merkle_tree">Merkle
tree</a> that just stores all
transactions. If the transaction contains an <code class="language-plaintext highlighter-rouge">=</code>, e.g. <code class="language-plaintext highlighter-rouge">key=value</code>, then
the <code class="language-plaintext highlighter-rouge">value</code> is stored under the <code class="language-plaintext highlighter-rouge">key</code> in the Merkle tree. Otherwise, the
full transaction bytes are stored as the key and the value.</p>

<p>Letâ€™s start a kvstore application.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>abci-cli kvstore
</code></pre></div></div>

<p>In another terminal, we can start Tendermint. You should already have the
Tendermint binary installed. If not, follow the steps from
<a href="/v0.37/introduction/install/">here</a>. If you have never run Tendermint
before, use:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tendermint init
tendermint node
</code></pre></div></div>

<p>If you have used Tendermint, you may want to reset the data for a new
blockchain by running <code class="language-plaintext highlighter-rouge">tendermint unsafe-reset-all</code>. Then you can run
<code class="language-plaintext highlighter-rouge">tendermint node</code> to start Tendermint, and connect to the app. For more
details, see <a href="/v0.37/tendermint-core/using-tendermint/">the guide on using Tendermint</a>.</p>

<p>You should see Tendermint making blocks! We can get the status of our
Tendermint node as follows:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> localhost:26657/status
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">-s</code> just silences <code class="language-plaintext highlighter-rouge">curl</code>. For nicer output, pipe the result into a
tool like <a href="https://stedolan.github.io/jq/">jq</a> or <code class="language-plaintext highlighter-rouge">json_pp</code>.</p>

<p>Now letâ€™s send some transactions to the kvstore.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="s1">'localhost:26657/broadcast_tx_commit?tx="abcd"'</span>
</code></pre></div></div>

<p>Note the single quote (<code class="language-plaintext highlighter-rouge">'</code>) around the url, which ensures that the
double quotes (<code class="language-plaintext highlighter-rouge">"</code>) are not escaped by bash. This command sent a
transaction with bytes <code class="language-plaintext highlighter-rouge">abcd</code>, so <code class="language-plaintext highlighter-rouge">abcd</code> will be stored as both the key
and the value in the Merkle tree. The response should look something
like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"jsonrpc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"check_tx"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
    </span><span class="nl">"deliver_tx"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"YXBwLmNyZWF0b3I="</span><span class="p">,</span><span class="w">
          </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"amFl"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"YXBwLmtleQ=="</span><span class="p">,</span><span class="w">
          </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"YWJjZA=="</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"hash"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9DF66553F98DE3C26E3C3317A3E4CED54F714E39"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"height"</span><span class="p">:</span><span class="w"> </span><span class="mi">14</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>We can confirm that our transaction worked and the value got stored by
querying the app:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="s1">'localhost:26657/abci_query?data="abcd"'</span>
</code></pre></div></div>

<p>The result should look like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"jsonrpc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"response"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"log"</span><span class="p">:</span><span class="w"> </span><span class="s2">"exists"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"index"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"YWJjZA=="</span><span class="p">,</span><span class="w">
      </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"YWJjZA=="</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Note the <code class="language-plaintext highlighter-rouge">value</code> in the result (<code class="language-plaintext highlighter-rouge">YWJjZA==</code>); this is the base64-encoding
of the ASCII of <code class="language-plaintext highlighter-rouge">abcd</code>. You can verify this in a python 2 shell by
running <code class="language-plaintext highlighter-rouge">"YWJjZA==".decode('base64')</code> or in python 3 shell by running
<code class="language-plaintext highlighter-rouge">import codecs; codecs.decode(b"YWJjZA==", 'base64').decode('ascii')</code>.
Stay tuned for a future release that <a href="https://github.com/tendermint/tendermint/issues/1794">makes this output more
human-readable</a>.</p>

<p>Now letâ€™s try setting a different key and value:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="s1">'localhost:26657/broadcast_tx_commit?tx="name=satoshi"'</span>
</code></pre></div></div>

<p>Now if we query for <code class="language-plaintext highlighter-rouge">name</code>, we should get <code class="language-plaintext highlighter-rouge">satoshi</code>, or <code class="language-plaintext highlighter-rouge">c2F0b3NoaQ==</code>
in base64:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="s1">'localhost:26657/abci_query?data="name"'</span>
</code></pre></div></div>

<p>Try some other transactions and queries to make sure everything is
working!</p>
:ET