I"@<h1 id="v037x">v0.37.x</h1>

<h2 id="issues-discovered">Issues discovered</h2>

<p>During this iteration of the QA process, the following issues were found:</p>

<ul>
  <li>(critical, fixed) [#9533] - This bug caused full nodes to sometimes get stuck
when blocksyncing, requiring a manual restart to unblock them. Importantly,
this bug was also present in v0.34.x and the fix was also backported in
[#9534].</li>
  <li>(critical, fixed) [#9539] - <code class="language-plaintext highlighter-rouge">loadtime</code> is very likely to include more than
one “=” character in transactions, with is rejected by the e2e application.</li>
  <li>(critical, fixed) [#9581] - Absent prometheus label makes Tendermint crash
when enabling Prometheus metric collection</li>
  <li>(non-critical, not fixed) [#9548] - Full nodes can go over 50 connected
peers, which is not intended by the default configuration.</li>
  <li>(non-critical, not fixed) [#9537] - With the default mempool cache setting,
duplicated transactions are not rejected when gossipped and eventually flood
all mempools. The 200 node testnets were thus run with a value of 200000 (as
opposed to the default 10000)</li>
</ul>

<h2 id="200-node-testnet">200 Node Testnet</h2>

<h3 id="finding-the-saturation-point">Finding the Saturation Point</h3>

<p>The first goal is to identify the saturation point and compare it with the baseline (v0.34.x).
For further details, see <a href="/v0.34/qa/v034/README/#finding-the-saturation-point">this paragraph</a>
in the baseline version.</p>

<p>The following table summarizes the results for v0.37.x, for the different experiments
(extracted from file <a href="/v0.34/qa/v037/img/v037_report_tabbed.txt"><code class="language-plaintext highlighter-rouge">v037_report_tabbed.txt</code></a>).</p>

<p>The X axis of this table is <code class="language-plaintext highlighter-rouge">c</code>, the number of connections created by the load runner process to the target node.
The Y axis of this table is <code class="language-plaintext highlighter-rouge">r</code>, the rate or number of transactions issued per second.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: right">c=1</th>
      <th style="text-align: right">c=2</th>
      <th style="text-align: right">c=4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">r=25</td>
      <td style="text-align: right">2225</td>
      <td style="text-align: right">4450</td>
      <td style="text-align: right">8900</td>
    </tr>
    <tr>
      <td style="text-align: left">r=50</td>
      <td style="text-align: right">4450</td>
      <td style="text-align: right">8900</td>
      <td style="text-align: right">17800</td>
    </tr>
    <tr>
      <td style="text-align: left">r=100</td>
      <td style="text-align: right">8900</td>
      <td style="text-align: right">17800</td>
      <td style="text-align: right">35600</td>
    </tr>
    <tr>
      <td style="text-align: left">r=200</td>
      <td style="text-align: right">17800</td>
      <td style="text-align: right">35600</td>
      <td style="text-align: right">38660</td>
    </tr>
  </tbody>
</table>

<p>For comparison, this is the table with the baseline version.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: right">c=1</th>
      <th style="text-align: right">c=2</th>
      <th style="text-align: right">c=4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">r=25</td>
      <td style="text-align: right">2225</td>
      <td style="text-align: right">4450</td>
      <td style="text-align: right">8900</td>
    </tr>
    <tr>
      <td style="text-align: left">r=50</td>
      <td style="text-align: right">4450</td>
      <td style="text-align: right">8900</td>
      <td style="text-align: right">17800</td>
    </tr>
    <tr>
      <td style="text-align: left">r=100</td>
      <td style="text-align: right">8900</td>
      <td style="text-align: right">17800</td>
      <td style="text-align: right">35400</td>
    </tr>
    <tr>
      <td style="text-align: left">r=200</td>
      <td style="text-align: right">17800</td>
      <td style="text-align: right">35600</td>
      <td style="text-align: right">37358</td>
    </tr>
  </tbody>
</table>

<p>The saturation point is beyond the diagonal:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">r=200,c=2</code></li>
  <li><code class="language-plaintext highlighter-rouge">r=100,c=4</code></li>
</ul>

<p>which is at the same place as the baseline. For more details on the saturation point, see
<a href="/v0.34/qa/v034/README/#finding-the-saturation-point">this paragraph</a> in the baseline version.</p>

<p>The experiment chosen to examine Prometheus metrics is the same as in the baseline:
<strong><code class="language-plaintext highlighter-rouge">r=200,c=2</code></strong>.</p>

<p>The load runner’s CPU load was negligible (near 0) when running <code class="language-plaintext highlighter-rouge">r=200,c=2</code>.</p>

<h3 id="examining-latencies">Examining latencies</h3>

<p>The method described <a href="/v0.34/qa/method/">here</a> allows us to plot the latencies of transactions
for all experiments.</p>

<p><img src="/v0.34/qa/v037/img/v037_200node_latencies.png" alt="all-latencies" /></p>

<p>The data seen in the plot is similar to that of the baseline.</p>

<p><img src="/v0.34/qa/v034/img/v034_200node_latencies.png" alt="all-latencies-bl" /></p>

<p>Therefore, for further details on these plots,
see <a href="/v0.34/qa/v034/README/#examining-latencies">this paragraph</a> in the baseline version.</p>

<p>The following plot summarizes average latencies versus overall throughputs
across different numbers of WebSocket connections to the node into which
transactions are being loaded.</p>

<p><img src="/v0.34/qa/v037/img/v037_latency_throughput.png" alt="latency-vs-throughput" /></p>

<p>This is similar to that of the baseline plot:</p>

<p><img src="/v0.34/qa/v034/img/v034_latency_throughput.png" alt="latency-vs-throughput-bl" /></p>

<h3 id="prometheus-metrics-on-the-chosen-experiment">Prometheus Metrics on the Chosen Experiment</h3>

<p>As mentioned <a href="#finding-the-saturation-point">above</a>, the chosen experiment is <code class="language-plaintext highlighter-rouge">r=200,c=2</code>.
This section further examines key metrics for this experiment extracted from Prometheus data.</p>

<h4 id="mempool-size">Mempool Size</h4>

<p>The mempool size, a count of the number of transactions in the mempool, was shown to be stable and homogeneous
at all full nodes. It did not exhibit any unconstrained growth.
The plot below shows the evolution over time of the cumulative number of transactions inside all full nodes’ mempools
at a given time.</p>

<p><img src="/v0.34/qa/v037/img/v037_r200c2_mempool_size.png" alt="mempool-cumulative" /></p>

<p>The plot below shows evolution of the average over all full nodes, which oscillate between 1500 and 2000 outstanding transactions.</p>

<p><img src="/v0.34/qa/v037/img/v037_r200c2_mempool_size_avg.png" alt="mempool-avg" /></p>

<p>The peaks observed coincide with the moments when some nodes reached round 1 of consensus (see below).</p>

<p><strong>These plots yield similar results to the baseline</strong>:</p>

<p><img src="/v0.34/qa/v034/img/v034_r200c2_mempool_size.png" alt="mempool-cumulative-bl" /></p>

<p><img src="/v0.34/qa/v034/img/v034_r200c2_mempool_size_avg.png" alt="mempool-avg-bl" /></p>

<h4 id="peers">Peers</h4>

<p>The number of peers was stable at all nodes.
It was higher for the seed nodes (around 140) than for the rest (between 16 and 78).</p>

<p><img src="/v0.34/qa/v037/img/v037_r200c2_peers.png" alt="peers" /></p>

<p>Just as in the baseline, the fact that non-seed nodes reach more than 50 peers is due to #9548.</p>

<p><strong>This plot yields similar results to the baseline</strong>:</p>

<p><img src="/v0.34/qa/v034/img/v034_r200c2_peers.png" alt="peers-bl" /></p>

<h4 id="consensus-rounds-per-height">Consensus Rounds per Height</h4>

<p>Most heights took just one round, but some nodes needed to advance to round 1 at some point.</p>

<p><img src="/v0.34/qa/v037/img/v037_r200c2_rounds.png" alt="rounds" /></p>

<p><strong>This plot yields slightly better results than the baseline</strong>:</p>

<p><img src="/v0.34/qa/v034/img/v034_r200c2_rounds.png" alt="rounds-bl" /></p>

<h4 id="blocks-produced-per-minute-transactions-processed-per-minute">Blocks Produced per Minute, Transactions Processed per Minute</h4>

<p>The blocks produced per minute are the gradient of this plot.</p>

<p><img src="/v0.34/qa/v037/img/v037_r200c2_heights.png" alt="heights" /></p>

<p>Over a period of 2 minutes, the height goes from 477 to 524.
This results in an average of 23.5 blocks produced per minute.</p>

<p>The transactions processed per minute are the gradient of this plot.</p>

<p><img src="/v0.34/qa/v037/img/v037_r200c2_total-txs.png" alt="total-txs" /></p>

<p>Over a period of 2 minutes, the total goes from 64525 to 100125 transactions,
resulting in 17800 transactions per minute. However, we can see in the plot that
all transactions in the load are process long before the two minutes.
If we adjust the time window when transactions are processed (approx. 90 seconds),
we obtain 23733 transactions per minute.</p>

<p><strong>These plots yield similar results to the baseline</strong>:</p>

<p><img src="/v0.34/qa/v034/img/v034_r200c2_heights.png" alt="heights-bl" /></p>

<p><img src="/v0.34/qa/v034/img/v034_r200c2_total-txs.png" alt="total-txs" /></p>

<h4 id="memory-resident-set-size">Memory Resident Set Size</h4>

<p>Resident Set Size of all monitored processes is plotted below.</p>

<p><img src="/v0.34/qa/v037/img/v037_r200c2_rss.png" alt="rss" /></p>

<p>The average over all processes oscillates around 380 MiB and does not demonstrate unconstrained growth.</p>

<p><img src="/v0.34/qa/v037/img/v037_r200c2_rss_avg.png" alt="rss-avg" /></p>

<p><strong>These plots yield similar results to the baseline</strong>:</p>

<p><img src="/v0.34/qa/v034/img/v034_r200c2_rss.png" alt="rss-bl" /></p>

<p><img src="/v0.34/qa/v034/img/v034_r200c2_rss_avg.png" alt="rss-avg-bl" /></p>

<h4 id="cpu-utilization">CPU utilization</h4>

<p>The best metric from Prometheus to gauge CPU utilization in a Unix machine is <code class="language-plaintext highlighter-rouge">load1</code>,
as it usually appears in the
<a href="https://www.digitalocean.com/community/tutorials/load-average-in-linux">output of <code class="language-plaintext highlighter-rouge">top</code></a>.</p>

<p><img src="/v0.34/qa/v037/img/v037_r200c2_load1.png" alt="load1" /></p>

<p>It is contained below 5 on most nodes.</p>

<p><strong>This plot yields similar results to the baseline</strong>:</p>

<p><img src="/v0.34/qa/v034/img/v034_r200c2_load1.png" alt="load1" /></p>

<h3 id="test-result">Test Result</h3>

<p><strong>Result: PASS</strong></p>

<p>Date: 2022-10-14</p>

<p>Version: 1cf9d8e276afe8595cba960b51cd056514965fd1</p>

<h2 id="rotating-node-testnet">Rotating Node Testnet</h2>

<p>We use the same load as in the baseline: <code class="language-plaintext highlighter-rouge">c=4,r=800</code>.</p>

<p>Just as in the baseline tests, the version of Tendermint used for these tests is affected by #9539.
See this paragraph in the <a href="/v0.34/qa/v034/README/#rotating-node-testnet">baseline report</a> for further details.
Finally, note that this setup allows for a fairer comparison between this version and the baseline.</p>

<h3 id="latencies">Latencies</h3>

<p>The plot of all latencies can be seen here.</p>

<p><img src="/v0.34/qa/v037/img/v037_rotating_latencies.png" alt="rotating-all-latencies" /></p>

<p>Which is similar to the baseline.</p>

<p><img src="/v0.34/qa/v034/img/v034_rotating_latencies_uniq.png" alt="rotating-all-latencies-bl" /></p>

<p>Note that we are comparing against the baseline plot with <em>unique</em>
transactions. This is because the problem with duplicate transactions
detected during the baseline experiment did not show up for <code class="language-plaintext highlighter-rouge">v0.37</code>,
which is <em>not</em> proof that the problem is not present in <code class="language-plaintext highlighter-rouge">v0.37</code>.</p>

<h3 id="prometheus-metrics">Prometheus Metrics</h3>

<p>The set of metrics shown here match those shown on the baseline (<code class="language-plaintext highlighter-rouge">v0.34</code>) for the same experiment.
We also show the baseline results for comparison.</p>

<h4 id="blocks-and-transactions-per-minute">Blocks and Transactions per minute</h4>

<p>The blocks produced per minute are the gradient of this plot.</p>

<p><img src="/v0.34/qa/v037/img/v037_rotating_heights.png" alt="rotating-heights" /></p>

<p>Over a period of 4446 seconds, the height goes from 5 to 3323.
This results in an average of 45 blocks produced per minute,
which is similar to the baseline, shown below.</p>

<p><img src="/v0.34/qa/v034/img/v034_rotating_heights.png" alt="rotating-heights-bl" /></p>

<p>The following two plots show only the heights reported by ephemeral nodes.
The second plot is the baseline plot for comparison.</p>

<p><img src="/v0.34/qa/v037/img/v037_rotating_heights_ephe.png" alt="rotating-heights-ephe" /></p>

<p><img src="/v0.34/qa/v034/img/v034_rotating_heights_ephe.png" alt="rotating-heights-ephe-bl" /></p>

<p>By the length of the segments, we can see that ephemeral nodes in <code class="language-plaintext highlighter-rouge">v0.37</code>
catch up slightly faster.</p>

<p>The transactions processed per minute are the gradient of this plot.</p>

<p><img src="/v0.34/qa/v037/img/v037_rotating_total-txs.png" alt="rotating-total-txs" /></p>

<p>Over a period of 3852 seconds, the total goes from 597 to 267298 transactions in one of the validators,
resulting in 4154 transactions per minute, which is slightly lower than the baseline,
although the baseline had to deal with duplicate transactions.</p>

<p>For comparison, this is the baseline plot.</p>

<p><img src="/v0.34/qa/v034/img/v034_rotating_total-txs.png" alt="rotating-total-txs-bl" /></p>

<h4 id="peers-1">Peers</h4>

<p>The plot below shows the evolution of the number of peers throughout the experiment.</p>

<p><img src="/v0.34/qa/v037/img/v037_rotating_peers.png" alt="rotating-peers" /></p>

<p>This is the baseline plot, for comparison.</p>

<p><img src="/v0.34/qa/v034/img/v034_rotating_peers.png" alt="rotating-peers-bl" /></p>

<p>The plotted values and their evolution are comparable in both plots.</p>

<p>For further details on these plots, see the baseline report.</p>

<h4 id="memory-resident-set-size-1">Memory Resident Set Size</h4>

<p>The average Resident Set Size (RSS) over all processes looks slightly more stable
on <code class="language-plaintext highlighter-rouge">v0.37</code> (first plot) than on the baseline (second plot).</p>

<p><img src="/v0.34/qa/v037/img/v037_rotating_rss_avg.png" alt="rotating-rss-avg" /></p>

<p><img src="/v0.34/qa/v034/img/v034_rotating_rss_avg.png" alt="rotating-rss-avg-bl" /></p>

<p>The memory taken by the validators and the ephemeral nodes when they are up is comparable (not shown in the plots),
just as observed in the baseline.</p>

<h4 id="cpu-utilization-1">CPU utilization</h4>

<p>The plot shows metric <code class="language-plaintext highlighter-rouge">load1</code> for all nodes.</p>

<p><img src="/v0.34/qa/v037/img/v037_rotating_load1.png" alt="rotating-load1" /></p>

<p>This is the baseline plot.</p>

<p><img src="/v0.34/qa/v034/img/v034_rotating_load1.png" alt="rotating-load1-bl" /></p>

<p>In both cases, it is contained under 5 most of the time, which is considered normal load.
The green line in the <code class="language-plaintext highlighter-rouge">v0.37</code> plot and the purple line in the baseline plot (<code class="language-plaintext highlighter-rouge">v0.34</code>)
correspond to the validators receiving all transactions, via RPC, from the load runner process.
In both cases, they oscillate around 5 (normal load). The main difference is that other
nodes are generally less loaded in <code class="language-plaintext highlighter-rouge">v0.37</code>.</p>

<h3 id="test-result-1">Test Result</h3>

<p><strong>Result: PASS</strong></p>

<p>Date: 2022-10-10</p>

<p>Version: 155110007b9d8b83997a799016c1d0844c8efbaf</p>

:ET