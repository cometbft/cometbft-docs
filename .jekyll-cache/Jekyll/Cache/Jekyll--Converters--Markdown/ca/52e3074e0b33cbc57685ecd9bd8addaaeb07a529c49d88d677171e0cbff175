I"PE<h1 id="how-to-read-logs">How to read logs</h1>

<h2 id="walkabout-example">Walkabout example</h2>

<p>We first create three connections (mempool, consensus and query) to the
application (running <code class="language-plaintext highlighter-rouge">kvstore</code> locally in this case).</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I[10-04|13:54:27.364] Starting multiAppConn                        <span class="nv">module</span><span class="o">=</span>proxy <span class="nv">impl</span><span class="o">=</span>multiAppConn
I[10-04|13:54:27.366] Starting localClient                         <span class="nv">module</span><span class="o">=</span>abci-client <span class="nv">connection</span><span class="o">=</span>query <span class="nv">impl</span><span class="o">=</span>localClient
I[10-04|13:54:27.366] Starting localClient                         <span class="nv">module</span><span class="o">=</span>abci-client <span class="nv">connection</span><span class="o">=</span>mempool <span class="nv">impl</span><span class="o">=</span>localClient
I[10-04|13:54:27.367] Starting localClient                         <span class="nv">module</span><span class="o">=</span>abci-client <span class="nv">connection</span><span class="o">=</span>consensus <span class="nv">impl</span><span class="o">=</span>localClient
</code></pre></div></div>

<p>Then Tendermint Core and the application perform a handshake.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I[10-04|13:54:27.367] ABCI Handshake                               <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">appHeight</span><span class="o">=</span>90 <span class="nv">appHash</span><span class="o">=</span>E0FBAFBF6FCED8B9786DDFEB1A0D4FA2501BADAD
I[10-04|13:54:27.368] ABCI Replay Blocks                           <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">appHeight</span><span class="o">=</span>90 <span class="nv">storeHeight</span><span class="o">=</span>90 <span class="nv">stateHeight</span><span class="o">=</span>90
I[10-04|13:54:27.368] Completed ABCI Handshake - Tendermint and App are synced <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">appHeight</span><span class="o">=</span>90 <span class="nv">appHash</span><span class="o">=</span>E0FBAFBF6FCED8B9786DDFEB1A0D4FA2501BADAD
</code></pre></div></div>

<p>After that, we start a few more things like the event switch, reactors,
and perform UPNP discover in order to detect the IP address.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I[10-04|13:54:27.374] Starting EventSwitch                         <span class="nv">module</span><span class="o">=</span>types <span class="nv">impl</span><span class="o">=</span>EventSwitch
I[10-04|13:54:27.375] This node is a validator                     <span class="nv">module</span><span class="o">=</span>consensus
I[10-04|13:54:27.379] Starting Node                                <span class="nv">module</span><span class="o">=</span>main <span class="nv">impl</span><span class="o">=</span>Node
I[10-04|13:54:27.381] Local listener                               <span class="nv">module</span><span class="o">=</span>p2p <span class="nv">ip</span><span class="o">=</span>:: <span class="nv">port</span><span class="o">=</span>26656
I[10-04|13:54:27.382] Getting UPNP external address                <span class="nv">module</span><span class="o">=</span>p2p
I[10-04|13:54:30.386] Could not perform UPNP discover              <span class="nv">module</span><span class="o">=</span>p2p <span class="nv">err</span><span class="o">=</span><span class="s2">"write udp4 0.0.0.0:38238-&gt;239.255.255.250:1900: i/o timeout"</span>
I[10-04|13:54:30.386] Starting DefaultListener                     <span class="nv">module</span><span class="o">=</span>p2p <span class="nv">impl</span><span class="o">=</span>Listener<span class="o">(</span>@10.0.2.15:26656<span class="o">)</span>
I[10-04|13:54:30.387] Starting P2P Switch                          <span class="nv">module</span><span class="o">=</span>p2p <span class="nv">impl</span><span class="o">=</span><span class="s2">"P2P Switch"</span>
I[10-04|13:54:30.387] Starting MempoolReactor                      <span class="nv">module</span><span class="o">=</span>mempool <span class="nv">impl</span><span class="o">=</span>MempoolReactor
I[10-04|13:54:30.387] Starting BlockchainReactor                   <span class="nv">module</span><span class="o">=</span>blockchain <span class="nv">impl</span><span class="o">=</span>BlockchainReactor
I[10-04|13:54:30.387] Starting ConsensusReactor                    <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">impl</span><span class="o">=</span>ConsensusReactor
I[10-04|13:54:30.387] ConsensusReactor                             <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">fastSync</span><span class="o">=</span><span class="nb">false
</span>I[10-04|13:54:30.387] Starting ConsensusState                      <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">impl</span><span class="o">=</span>ConsensusState
I[10-04|13:54:30.387] Starting WAL                                 <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">wal</span><span class="o">=</span>/home/vagrant/.tendermint/data/cs.wal/wal <span class="nv">impl</span><span class="o">=</span>WAL
I[10-04|13:54:30.388] Starting TimeoutTicker                       <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">impl</span><span class="o">=</span>TimeoutTicker
</code></pre></div></div>

<p>Notice the second row where Tendermint Core reports that “This node is a
validator”. It also could be just an observer (regular node).</p>

<p>Next we replay all the messages from the WAL.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I[10-04|13:54:30.390] Catchup by replaying consensus messages      <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">height</span><span class="o">=</span>91
I[10-04|13:54:30.390] Replay: New Step                             <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">height</span><span class="o">=</span>91 <span class="nv">round</span><span class="o">=</span>0 <span class="nv">step</span><span class="o">=</span>RoundStepNewHeight
I[10-04|13:54:30.390] Replay: Done                                 <span class="nv">module</span><span class="o">=</span>consensus
</code></pre></div></div>

<p>“Started node” message signals that everything is ready for work.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I[10-04|13:54:30.391] Starting RPC HTTP server on tcp socket 0.0.0.0:26657 <span class="nv">module</span><span class="o">=</span>rpc-server
I[10-04|13:54:30.392] Started node                                 <span class="nv">module</span><span class="o">=</span>main <span class="nv">nodeInfo</span><span class="o">=</span><span class="s2">"NodeInfo{id: DF22D7C92C91082324A1312F092AA1DA197FA598DBBFB6526E, moniker: anonymous, network: test-chain-3MNw2N [remote , listen 10.0.2.15:26656], version: 0.11.0-10f361fc ([wire_version=0.6.2 p2p_version=0.5.0 consensus_version=v1/0.2.2 rpc_version=0.7.0/3 tx_index=on rpc_addr=tcp://0.0.0.0:26657])}"</span>
</code></pre></div></div>

<p>Next follows a standard block creation cycle, where we enter a new
round, propose a block, receive more than 2/3 of prevotes, then
precommits and finally have a chance to commit a block. For details,
please refer to <a href="https://github.com/tendermint/tendermint/blob/main/spec/consensus/consensus.md">Byzantine Consensus
Algorithm</a>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I[10-04|13:54:30.393] enterNewRound<span class="o">(</span>91/0<span class="o">)</span><span class="nb">.</span> Current: 91/0/RoundStepNewHeight <span class="nv">module</span><span class="o">=</span>consensus
I[10-04|13:54:30.393] enterPropose<span class="o">(</span>91/0<span class="o">)</span><span class="nb">.</span> Current: 91/0/RoundStepNewRound <span class="nv">module</span><span class="o">=</span>consensus
I[10-04|13:54:30.393] enterPropose: Our turn to propose            <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">proposer</span><span class="o">=</span>125B0E3C5512F5C2B0E1109E31885C4511570C42 <span class="nv">privValidator</span><span class="o">=</span><span class="s2">"PrivValidator{125B0E3C5512F5C2B0E1109E31885C4511570C42 LH:90, LR:0, LS:3}"</span>
I[10-04|13:54:30.394] Signed proposal                              <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">height</span><span class="o">=</span>91 <span class="nv">round</span><span class="o">=</span>0 <span class="nv">proposal</span><span class="o">=</span><span class="s2">"Proposal{91/0 1:21B79872514F (-1,:0:000000000000) {/10EDEDD7C84E.../}}"</span>
I[10-04|13:54:30.397] Received <span class="nb">complete </span>proposal block             <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">height</span><span class="o">=</span>91 <span class="nb">hash</span><span class="o">=</span>F671D562C7B9242900A286E1882EE64E5556FE9E
I[10-04|13:54:30.397] enterPrevote<span class="o">(</span>91/0<span class="o">)</span><span class="nb">.</span> Current: 91/0/RoundStepPropose <span class="nv">module</span><span class="o">=</span>consensus
I[10-04|13:54:30.397] enterPrevote: ProposalBlock is valid         <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">height</span><span class="o">=</span>91 <span class="nv">round</span><span class="o">=</span>0
I[10-04|13:54:30.398] Signed and pushed vote                       <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">height</span><span class="o">=</span>91 <span class="nv">round</span><span class="o">=</span>0 <span class="nv">vote</span><span class="o">=</span><span class="s2">"Vote{0:125B0E3C5512 91/00/1(Prevote) F671D562C7B9 {/89047FFC21D8.../}}"</span> <span class="nv">err</span><span class="o">=</span>null
I[10-04|13:54:30.401] Added to prevote                             <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">vote</span><span class="o">=</span><span class="s2">"Vote{0:125B0E3C5512 91/00/1(Prevote) F671D562C7B9 {/89047FFC21D8.../}}"</span> <span class="nv">prevotes</span><span class="o">=</span><span class="s2">"VoteSet{H:91 R:0 T:1 +2/3:F671D562C7B9242900A286E1882EE64E5556FE9E:1:21B79872514F BA{1:X} map[]}"</span>
I[10-04|13:54:30.401] enterPrecommit<span class="o">(</span>91/0<span class="o">)</span><span class="nb">.</span> Current: 91/0/RoundStepPrevote <span class="nv">module</span><span class="o">=</span>consensus
I[10-04|13:54:30.401] enterPrecommit: +2/3 prevoted proposal block. Locking <span class="nv">module</span><span class="o">=</span>consensus <span class="nb">hash</span><span class="o">=</span>F671D562C7B9242900A286E1882EE64E5556FE9E
I[10-04|13:54:30.402] Signed and pushed vote                       <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">height</span><span class="o">=</span>91 <span class="nv">round</span><span class="o">=</span>0 <span class="nv">vote</span><span class="o">=</span><span class="s2">"Vote{0:125B0E3C5512 91/00/2(Precommit) F671D562C7B9 {/80533478E41A.../}}"</span> <span class="nv">err</span><span class="o">=</span>null
I[10-04|13:54:30.404] Added to precommit                           <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">vote</span><span class="o">=</span><span class="s2">"Vote{0:125B0E3C5512 91/00/2(Precommit) F671D562C7B9 {/80533478E41A.../}}"</span> <span class="nv">precommits</span><span class="o">=</span><span class="s2">"VoteSet{H:91 R:0 T:2 +2/3:F671D562C7B9242900A286E1882EE64E5556FE9E:1:21B79872514F BA{1:X} map[]}"</span>
I[10-04|13:54:30.404] enterCommit<span class="o">(</span>91/0<span class="o">)</span><span class="nb">.</span> Current: 91/0/RoundStepPrecommit <span class="nv">module</span><span class="o">=</span>consensus
I[10-04|13:54:30.405] Finalizing commit of block with 0 txs        <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">height</span><span class="o">=</span>91 <span class="nb">hash</span><span class="o">=</span>F671D562C7B9242900A286E1882EE64E5556FE9E <span class="nv">root</span><span class="o">=</span>E0FBAFBF6FCED8B9786DDFEB1A0D4FA2501BADAD
I[10-04|13:54:30.405] Block<span class="o">{</span>
  Header<span class="o">{</span>
    ChainID:        test-chain-3MNw2N
    Height:         91
    Time:           2017-10-04 13:54:30.393 +0000 UTC
    NumTxs:         0
    LastBlockID:    F15AB8BEF9A6AAB07E457A6E16BC410546AA4DC6:1:D505DA273544
    LastCommit:     56FEF2EFDB8B37E9C6E6D635749DF3169D5F005D
    Data:
    Validators:     CE25FBFF2E10C0D51AA1A07C064A96931BC8B297
    App:            E0FBAFBF6FCED8B9786DDFEB1A0D4FA2501BADAD
  <span class="o">}</span><span class="c">#F671D562C7B9242900A286E1882EE64E5556FE9E</span>
  Data<span class="o">{</span>

  <span class="o">}</span><span class="c">#</span>
  Commit<span class="o">{</span>
    BlockID:    F15AB8BEF9A6AAB07E457A6E16BC410546AA4DC6:1:D505DA273544
    Precommits: Vote<span class="o">{</span>0:125B0E3C5512 90/00/2<span class="o">(</span>Precommit<span class="o">)</span> F15AB8BEF9A6 <span class="o">{</span>/FE98E2B956F0.../<span class="o">}}</span>
  <span class="o">}</span><span class="c">#56FEF2EFDB8B37E9C6E6D635749DF3169D5F005D</span>
<span class="o">}</span><span class="c">#F671D562C7B9242900A286E1882EE64E5556FE9E module=consensus</span>
I[10-04|13:54:30.408] Executed block                               <span class="nv">module</span><span class="o">=</span>state <span class="nv">height</span><span class="o">=</span>91 <span class="nv">validTxs</span><span class="o">=</span>0 <span class="nv">invalidTxs</span><span class="o">=</span>0
I[10-04|13:54:30.410] Committed state                              <span class="nv">module</span><span class="o">=</span>state <span class="nv">height</span><span class="o">=</span>91 <span class="nv">txs</span><span class="o">=</span>0 <span class="nb">hash</span><span class="o">=</span>E0FBAFBF6FCED8B9786DDFEB1A0D4FA2501BADAD
I[10-04|13:54:30.410] Recheck txs                                  <span class="nv">module</span><span class="o">=</span>mempool <span class="nv">numtxs</span><span class="o">=</span>0 <span class="nv">height</span><span class="o">=</span>91
</code></pre></div></div>

<h2 id="list-of-modules">List of modules</h2>

<p>Here is the list of modules you may encounter in Tendermint’s log and a
little overview what they do.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">abci-client</code> As mentioned in <a href="/v0.34/app-dev/abci-cli/">Application Development Guide</a>, Tendermint acts as an ABCI
client with respect to the application and maintains 3 connections:
mempool, consensus and query. The code used by Tendermint Core can
be found <a href="https://github.com/tendermint/tendermint/blob/v0.34.x/abci/client">here</a>.</li>
  <li><code class="language-plaintext highlighter-rouge">blockchain</code> Provides storage, pool (a group of peers), and reactor
for both storing and exchanging blocks between peers.</li>
  <li><code class="language-plaintext highlighter-rouge">consensus</code> The heart of Tendermint core, which is the
implementation of the consensus algorithm. Includes two
“submodules”: <code class="language-plaintext highlighter-rouge">wal</code> (write-ahead logging) for ensuring data
integrity and <code class="language-plaintext highlighter-rouge">replay</code> to replay blocks and messages on recovery
from a crash.</li>
  <li><code class="language-plaintext highlighter-rouge">events</code> Simple event notification system. The list of events can be
found
<a href="https://github.com/tendermint/tendermint/blob/v0.34.x/types/events.go">here</a>.
You can subscribe to them by calling <code class="language-plaintext highlighter-rouge">subscribe</code> RPC method. Refer
to <a href="/v0.34/tendermint-core/rpc/">RPC docs</a> for additional information.</li>
  <li><code class="language-plaintext highlighter-rouge">mempool</code> Mempool module handles all incoming transactions, whenever
they are coming from peers or the application.</li>
  <li><code class="language-plaintext highlighter-rouge">p2p</code> Provides an abstraction around peer-to-peer communication. For
more details, please check out the
<a href="https://github.com/tendermint/tendermint/blob/v0.34.x/p2p/README.md">README</a>.</li>
  <li><code class="language-plaintext highlighter-rouge">rpc</code> <a href="/v0.34/tendermint-core/rpc/">Tendermint’s RPC</a>.</li>
  <li><code class="language-plaintext highlighter-rouge">rpc-server</code> RPC server. For implementation details, please read the
<a href="https://github.com/tendermint/tendermint/blob/v0.34.x/rpc/jsonrpc/doc.go">doc.go</a>.</li>
  <li><code class="language-plaintext highlighter-rouge">state</code> Represents the latest state and execution submodule, which
executes blocks against the application.</li>
  <li><code class="language-plaintext highlighter-rouge">types</code> A collection of the publicly exposed types and methods to
work with them.</li>
</ul>
:ET