I"í<h1 id="client-and-server">Client and Server</h1>

<p>This section is for those looking to implement their own ABCI Server, perhaps in
a new programming language.</p>

<p>You are expected to have read all previous sections of ABCI++ specification, namely
<a href="./abci%2B%2B_basic_concepts.md">Basic Concepts</a>,
<a href="./abci%2B%2B_methods.md">Methods</a>,
<a href="./abci%2B%2B_app_requirements.md">Application Requirements</a>, and
<a href="./abci%2B%2B_tmint_expected_behavior.md">Expected Behavior</a>.</p>

<h2 id="message-protocol-and-synchrony">Message Protocol and Synchrony</h2>

<p>The message protocol consists of pairs of requests and responses defined in the
<a href="../../proto/tendermint/abci/types.proto">protobuf file</a>.</p>

<p>Some messages have no fields, while others may include byte-arrays, strings, integers,
or custom protobuf types.</p>

<p>For more details on protobuf, see the <a href="https://developers.google.com/protocol-buffers/docs/overview">documentation</a>.</p>

<!--
As of v0.36 requests are synchronous. For each of ABCI++'s four connections (see
[Connections](./abci%2B%2B_app_requirements.md)), when CometBFT issues a request to the
Application, it will wait for the response before continuing execution. As a side effect,
requests and responses are ordered for each connection, but not necessarily across connections.
-->
<h2 id="server-implementations">Server Implementations</h2>

<p>To use ABCI in your programming language of choice, there must be an ABCI
server in that language. CometBFT supports four implementations of the ABCI server:</p>

<ul>
  <li>in CometBFTâ€™s repository:
    <ul>
      <li>In-process</li>
      <li>ABCI-socket</li>
      <li>GRPC</li>
    </ul>
  </li>
  <li><a href="https://github.com/informalsystems/tendermint-rs">tendermint-rs</a></li>
  <li><a href="https://github.com/penumbra-zone/tower-abci">tower-abci</a></li>
</ul>

<p>The implementations in CometBFTâ€™s repository can be tested using <code class="language-plaintext highlighter-rouge">abci-cli</code> by setting
the <code class="language-plaintext highlighter-rouge">--abci</code> flag appropriately.</p>

<p>See examples, in various stages of maintenance, in
<a href="https://github.com/cometbft/cometbft/tree/master/abci/server">Go</a>,
<a href="https://github.com/tendermint/js-abci">JavaScript</a>,
<a href="https://github.com/mdyring/cpp-tmsp">C++</a>, and
<a href="https://github.com/jTendermint/jabci">Java</a>.</p>

<h3 id="in-process">In Process</h3>

<p>The simplest implementation uses function calls in Golang.
This means ABCI applications written in Golang can be linked with CometBFT and run as a single binary.</p>

<h3 id="grpc">GRPC</h3>

<p>If you are not using Golang,
but <a href="https://grpc.io/">GRPC</a> is available in your language, this is the easiest approach,
though it will have significant performance overhead.</p>

<p>Please check GRPCâ€™s documentation to know to set up the Application as an
ABCI GRPC server.</p>

<h3 id="socket">Socket</h3>

<p>The CometBFT Socket Protocol is an asynchronous, raw socket server protocol which provides ordered
message passing over Unix or TCP sockets. Messages are serialized using Protobuf3 and length-prefixed
with an <a href="https://developers.google.com/protocol-buffers/docs/encoding?csw=1#varints">unsigned varint</a></p>

<p>If gRPC is not available in your language, or you require higher performance, or
otherwise enjoy programming, you may implement your own ABCI server using the
CometBFT Socket Protocol. The first step is still to auto-generate the
relevant data types and codec in your language using <code class="language-plaintext highlighter-rouge">protoc</code>, and then you need to
ensure you handle the unsigned <code class="language-plaintext highlighter-rouge">varint</code>-based message length encoding scheme
when reading and writing messages to the socket.</p>

<p>Note that our length prefixing scheme does not apply to gRPC.</p>

<p>Also note that your ABCI server must be able to handle multiple connections,
as CometBFT uses four connections.</p>

<h2 id="client">Client</h2>

<p>There are currently two use-cases for an ABCI client. One is testing
tools that allow ABCI requests to be sent to the actual application via
command line. An example of this is <code class="language-plaintext highlighter-rouge">abci-cli</code>, which accepts CLI commands
to send corresponding ABCI requests.
The other is a consensus engine, such as CometBFT,
which makes ABCI requests to the application as prescribed by the consensus
algorithm used.</p>
:ET