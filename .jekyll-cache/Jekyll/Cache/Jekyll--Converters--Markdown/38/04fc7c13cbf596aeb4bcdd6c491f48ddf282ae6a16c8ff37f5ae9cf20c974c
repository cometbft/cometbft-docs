I"<h1 id="creating-an-application-in-go">Creating an application in Go</h1>

<h2 id="guide-assumptions">Guide Assumptions</h2>

<p>This guide is designed for beginners who want to get started with a Tendermint
Core application from scratch. It does not assume that you have any prior
experience with Tendermint Core.</p>

<p>Tendermint Core is a service that provides a Byzantine Fault Tolerant consensus engine
for state-machine replication. The replicated state-machine, or “application”, can be written
in any language that can send and receive protocol buffer messages in a client-server model.
Applications written in Go can also use Tendermint as a library and run the service in the same
process as the application.</p>

<p>By following along this tutorial you will create a Tendermint Core application called kvstore,
a (very) simple distributed BFT key-value store.
The application will be written in Go and
some understanding of the Go programming language is expected.
If you have never written Go, you may want to go through <a href="https://learnxinyminutes.com/docs/go/">Learn X in Y minutes
Where X=Go</a> first, to familiarize
yourself with the syntax.</p>

<p>Note: Please use the latest released version of this guide and of Tendermint.
We strongly advise against using unreleased commits for your development.</p>

<h3 id="built-in-app-vs-external-app">Built-in app vs external app</h3>

<p>On the one hand, to get maximum performance you can run your application in
the same process as the Tendermint Core, as long as your application is written in Go.
<a href="https://github.com/cosmos/cosmos-sdk">Cosmos SDK</a> is written
this way.
If that is the way you wish to proceed, use the <a href="/v0.37/tutorials/go-built-in/">Creating a built-in application in Go</a> guide instead of this one.</p>

<p>On the other hand, having a separate application might give you better security
guarantees as two processes would be communicating via established binary protocol.
Tendermint Core will not have access to application’s state.
This is the approach followed in this tutorial.</p>

<h2 id="11-installing-go">1.1 Installing Go</h2>

<p>Verify that you have the latest version of Go installed (refer to the <a href="https://golang.org/doc/install">official guide for installing Go</a>):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go version
go version go1.19.2 darwin/amd64
</code></pre></div></div>

<h2 id="12-creating-a-new-go-project">1.2 Creating a new Go project</h2>

<p>We’ll start by creating a new Go project.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>kvstore
</code></pre></div></div>

<p>Inside the example directory, create a <code class="language-plaintext highlighter-rouge">main.go</code> file with the following content:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Hello, Tendermint Core"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When run, this should print “Hello, Tendermint Core” to the standard output.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>kvstore
<span class="nv">$ </span>go run main.go
Hello, Tendermint Core
</code></pre></div></div>

<p>We are going to use <a href="https://github.com/golang/go/wiki/Modules">Go modules</a> for
dependency management, so let’s start by including a dependency on the latest version of
Tendermint.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go mod init kvstore
go get github.com/tendermint/tendermint@latest
</code></pre></div></div>

<p>After running the above commands you will see two generated files, <code class="language-plaintext highlighter-rouge">go.mod</code> and <code class="language-plaintext highlighter-rouge">go.sum</code>.
The go.mod file should look similar to:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">module</span> <span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">me</span><span class="o">/</span><span class="n">example</span>

<span class="k">go</span> <span class="m">1.19</span>

<span class="n">require</span> <span class="p">(</span>
	<span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">tendermint</span><span class="o">/</span><span class="n">tendermint</span> <span class="n">v0</span><span class="m">.37.0</span>
<span class="p">)</span>
</code></pre></div></div>

<p>As you write the kvstore application, you can rebuild the binary by
pulling any new dependencies and recompiling it.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get
go build
</code></pre></div></div>

<h2 id="13-writing-a-tendermint-core-application">1.3 Writing a Tendermint Core application</h2>

<p>Tendermint Core communicates with the application through the Application
BlockChain Interface (ABCI). The messages exchanged through the interface are
defined in the ABCI <a href="https://github.com/tendermint/tendermint/blob/main/proto/tendermint/abci/types.proto">protobuf
file</a>.</p>

<p>We begin by creating the basic scaffolding for an ABCI application by
creating a new type, <code class="language-plaintext highlighter-rouge">KVStoreApplication</code>, which implements the
methods defined by the <code class="language-plaintext highlighter-rouge">abcitypes.Application</code> interface.</p>

<p>Create a file called <code class="language-plaintext highlighter-rouge">app.go</code> with the following contents:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="n">abcitypes</span> <span class="s">"github.com/tendermint/tendermint/abci/types"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">KVStoreApplication</span> <span class="k">struct</span><span class="p">{}</span>

<span class="k">var</span> <span class="n">_</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">Application</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)(</span><span class="no">nil</span><span class="p">)</span>

<span class="k">func</span> <span class="n">NewKVStoreApplication</span><span class="p">()</span> <span class="o">*</span><span class="n">KVStoreApplication</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">KVStoreApplication</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">Info</span><span class="p">(</span><span class="n">info</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestInfo</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseInfo</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseInfo</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">Query</span><span class="p">(</span><span class="n">query</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestQuery</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseQuery</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseQuery</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">CheckTx</span><span class="p">(</span><span class="n">tx</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestCheckTx</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseCheckTx</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseCheckTx</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">InitChain</span><span class="p">(</span><span class="n">chain</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestInitChain</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseInitChain</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseInitChain</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">PrepareProposal</span><span class="p">(</span><span class="n">proposal</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestPrepareProposal</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponsePrepareProposal</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponsePrepareProposal</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">ProcessProposal</span><span class="p">(</span><span class="n">proposal</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestProcessProposal</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseProcessProposal</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseProcessProposal</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">BeginBlock</span><span class="p">(</span><span class="n">block</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestBeginBlock</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseBeginBlock</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseBeginBlock</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">DeliverTx</span><span class="p">(</span><span class="n">tx</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestDeliverTx</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseDeliverTx</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseDeliverTx</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">EndBlock</span><span class="p">(</span><span class="n">block</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestEndBlock</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseEndBlock</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseEndBlock</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">Commit</span><span class="p">()</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseCommit</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseCommit</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">ListSnapshots</span><span class="p">(</span><span class="n">snapshots</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestListSnapshots</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseListSnapshots</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseListSnapshots</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">OfferSnapshot</span><span class="p">(</span><span class="n">snapshot</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestOfferSnapshot</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseOfferSnapshot</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseOfferSnapshot</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">LoadSnapshotChunk</span><span class="p">(</span><span class="n">chunk</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestLoadSnapshotChunk</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseLoadSnapshotChunk</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseLoadSnapshotChunk</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">ApplySnapshotChunk</span><span class="p">(</span><span class="n">chunk</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestApplySnapshotChunk</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseApplySnapshotChunk</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseApplySnapshotChunk</span><span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The types used here are defined in the Tendermint library and were added as a dependency
to the project when you ran <code class="language-plaintext highlighter-rouge">go get</code>. If your IDE is not recognizing the types, go ahead and run the command again.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get github.com/tendermint/tendermint@latest
</code></pre></div></div>

<p>Now go back to the <code class="language-plaintext highlighter-rouge">main.go</code> and modify the <code class="language-plaintext highlighter-rouge">main</code> function so it matches the following,
where an instance of the <code class="language-plaintext highlighter-rouge">KVStoreApplication</code> type is created.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Hello, Tendermint Core"</span><span class="p">)</span>

    <span class="n">_</span> <span class="o">=</span> <span class="n">NewKVStoreApplication</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You can recompile and run the application now by running <code class="language-plaintext highlighter-rouge">go get</code> and <code class="language-plaintext highlighter-rouge">go build</code>, but it does
not do anything.
So let’s revisit the code adding the logic needed to implement our minimal key/value store
and to start it along with the Tendermint Service.</p>

<h3 id="131-add-a-persistent-data-store">1.3.1 Add a persistent data store</h3>

<p>Our application will need to write its state out to persistent storage so that it
can stop and start without losing all of its data.</p>

<p>For this tutorial, we will use <a href="https://github.com/dgraph-io/badger">BadgerDB</a>, a
a fast embedded key-value store.</p>

<p>First, add Badger as a dependency of your go module using the <code class="language-plaintext highlighter-rouge">go get</code> command:</p>

<p><code class="language-plaintext highlighter-rouge">go get github.com/dgraph-io/badger/v3</code></p>

<p>Next, let’s update the application and its constructor to receive a handle to the database, as follows:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">KVStoreApplication</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">db</span>           <span class="o">*</span><span class="n">badger</span><span class="o">.</span><span class="n">DB</span>
	<span class="n">onGoingBlock</span> <span class="o">*</span><span class="n">badger</span><span class="o">.</span><span class="n">Txn</span>
<span class="p">}</span>

<span class="k">var</span> <span class="n">_</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">Application</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)(</span><span class="no">nil</span><span class="p">)</span>

<span class="k">func</span> <span class="n">NewKVStoreApplication</span><span class="p">(</span><span class="n">db</span> <span class="o">*</span><span class="n">badger</span><span class="o">.</span><span class="n">DB</span><span class="p">)</span> <span class="o">*</span><span class="n">KVStoreApplication</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">KVStoreApplication</span><span class="p">{</span><span class="n">db</span><span class="o">:</span> <span class="n">db</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">onGoingBlock</code> keeps track of the Badger transaction that will update the application’s state when a block
is completed. Don’t worry about it for now, we’ll get to that later.</p>

<p>Next, update the <code class="language-plaintext highlighter-rouge">import</code> stanza at the top to include the Badger library:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span><span class="p">(</span>
	<span class="s">"github.com/dgraph-io/badger/v3"</span>
	<span class="n">abcitypes</span> <span class="s">"github.com/tendermint/tendermint/abci/types"</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Finally, update the <code class="language-plaintext highlighter-rouge">main.go</code> file to invoke the updated constructor:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">_</span> <span class="o">=</span> <span class="n">NewKVStoreApplication</span><span class="p">(</span><span class="no">nil</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="132-checktx">1.3.2 CheckTx</h3>

<p>When Tendermint Core receives a new transaction from a client, Tendermint asks the application if
the transaction is acceptable, using the <code class="language-plaintext highlighter-rouge">CheckTx</code> method.</p>

<p>In our application, a transaction is a string with the form <code class="language-plaintext highlighter-rouge">key=value</code>, indicating a key and value to write to the store.</p>

<p>The most basic validation check we can perform is to check if the transaction conforms to the <code class="language-plaintext highlighter-rouge">key=value</code> pattern.
For that, let’s add the following helper method to app.go:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">isValid</span><span class="p">(</span><span class="n">tx</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">uint32</span> <span class="p">{</span>
	<span class="c">// check format</span>
	<span class="n">parts</span> <span class="o">:=</span> <span class="n">bytes</span><span class="o">.</span><span class="n">Split</span><span class="p">(</span><span class="n">tx</span><span class="p">,</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"="</span><span class="p">))</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">!=</span> <span class="m">2</span> <span class="p">{</span>
		<span class="k">return</span> <span class="m">1</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="m">0</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now you can rewrite the <code class="language-plaintext highlighter-rouge">CheckTx</code> method to use the helper function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">CheckTx</span><span class="p">(</span><span class="n">req</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestCheckTx</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseCheckTx</span> <span class="p">{</span>
	<span class="n">code</span> <span class="o">:=</span> <span class="n">app</span><span class="o">.</span><span class="n">isValid</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">Tx</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseCheckTx</span><span class="p">{</span><span class="n">Code</span><span class="o">:</span> <span class="n">code</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>While this <code class="language-plaintext highlighter-rouge">CheckTx</code> is simple and only validates that the transaction is well-formed,
it is very common for <code class="language-plaintext highlighter-rouge">CheckTx</code> to make more complex use of the state of an application.
For example, you may refuse to overwrite an existing value, or you can associate
versions to the key/value pairs and allow the caller to specify a version to
perform a conditional update.</p>

<p>Depending on the checks and on the conditions violated, the function may return
different values, but any response with a non-zero code will be considered invalid
by Tendermint. Our <code class="language-plaintext highlighter-rouge">CheckTx</code> logic returns 0 to Tendermint when a transaction passes
its validation checks. The specific value of the code is meaningless to Tendermint.
Non-zero codes are logged by Tendermint so applications can provide more specific
information on why the transaction was rejected.</p>

<p>Note that <code class="language-plaintext highlighter-rouge">CheckTx</code> does not execute the transaction, it only verifies that that the transaction could be executed. We do not know yet if the rest of the network has agreed to accept this transaction into a block.</p>

<p>Finally, make sure to add the bytes package to the <code class="language-plaintext highlighter-rouge">import</code> stanza at the top of <code class="language-plaintext highlighter-rouge">app.go</code>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span><span class="p">(</span>
	<span class="s">"bytes"</span>

	<span class="s">"github.com/dgraph-io/badger/v3"</span>
	<span class="n">abcitypes</span> <span class="s">"github.com/tendermint/tendermint/abci/types"</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="133-beginblock---delivertx---endblock---commit">1.3.3 BeginBlock -&gt; DeliverTx -&gt; EndBlock -&gt; Commit</h3>

<p>When the Tendermint consensus engine has decided on the block, the block is transferred to the
application over three ABCI method calls: <code class="language-plaintext highlighter-rouge">BeginBlock</code>, <code class="language-plaintext highlighter-rouge">DeliverTx</code>, and <code class="language-plaintext highlighter-rouge">EndBlock</code>.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">BeginBlock</code> is called once to indicate to the application that it is about to
receive a block.</li>
  <li><code class="language-plaintext highlighter-rouge">DeliverTx</code> is called repeatedly, once for each application transaction that was included in the block.</li>
  <li><code class="language-plaintext highlighter-rouge">EndBlock</code> is called once to indicate to the application that no more transactions
will be delivered to the application in within this block.</li>
</ul>

<p>Note that, to implement these calls in our application we’re going to make use of Badger’s
transaction mechanism. We will always refer to these as Badger transactions, not to
confuse them with the transactions included in the blocks delivered by Tendermint,
the <em>application transactions</em>.</p>

<p>First, let’s create a new Badger transaction during <code class="language-plaintext highlighter-rouge">BeginBlock</code>. All application transactions in the
current block will be executed within this Badger transaction.
Then, return informing Tendermint that the application is ready to receive application transactions:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">BeginBlock</span><span class="p">(</span><span class="n">req</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestBeginBlock</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseBeginBlock</span> <span class="p">{</span>
	<span class="n">app</span><span class="o">.</span><span class="n">onGoingBlock</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">NewTransaction</span><span class="p">(</span><span class="no">true</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseBeginBlock</span><span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Next, let’s modify <code class="language-plaintext highlighter-rouge">DeliverTx</code> to add the <code class="language-plaintext highlighter-rouge">key</code> and <code class="language-plaintext highlighter-rouge">value</code> to the database transaction every time our application
receives a new application transaction through <code class="language-plaintext highlighter-rouge">RequestDeliverTx</code>.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">DeliverTx</span><span class="p">(</span><span class="n">req</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestDeliverTx</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseDeliverTx</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">code</span> <span class="o">:=</span> <span class="n">app</span><span class="o">.</span><span class="n">isValid</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">Tx</span><span class="p">);</span> <span class="n">code</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseDeliverTx</span><span class="p">{</span><span class="n">Code</span><span class="o">:</span> <span class="n">code</span><span class="p">}</span>
	<span class="p">}</span>

	<span class="n">parts</span> <span class="o">:=</span> <span class="n">bytes</span><span class="o">.</span><span class="n">SplitN</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">Tx</span><span class="p">,</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"="</span><span class="p">),</span> <span class="m">2</span><span class="p">)</span>
	<span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">:=</span> <span class="n">parts</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="m">1</span><span class="p">]</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">app</span><span class="o">.</span><span class="n">onGoingBlock</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Panicf</span><span class="p">(</span><span class="s">"Error writing to database, unable to execute tx: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseDeliverTx</span><span class="p">{</span><span class="n">Code</span><span class="o">:</span> <span class="m">0</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Note that we check the validity of the transaction <em>again</em> during <code class="language-plaintext highlighter-rouge">DeliverTx</code>.
Transactions are not guaranteed to be valid when they are delivered to an
application, even if they were valid when they were proposed.
This can happen if the application state is used to determine transaction
validity. Application state may have changed between the initial execution of <code class="language-plaintext highlighter-rouge">CheckTx</code>
and the transaction delivery in <code class="language-plaintext highlighter-rouge">DeliverTx</code> in a way that rendered the transaction
no longer valid.</p>

<p><code class="language-plaintext highlighter-rouge">EndBlock</code> is called to inform the application that the full block has been delivered
and give the application a chance to perform any other computation needed, before the
effects of the transactions become permanent.</p>

<p>Note that <code class="language-plaintext highlighter-rouge">EndBlock</code> <strong>cannot</strong> yet commit the Badger transaction we were building
in during <code class="language-plaintext highlighter-rouge">DeliverTx</code>.
Since other methods, such as <code class="language-plaintext highlighter-rouge">Query</code>, rely on a consistent view of the application’s
state, the application should only update its state by committing the Badger transactions
when the full block has been delivered and the <code class="language-plaintext highlighter-rouge">Commit</code> method is invoked.</p>

<p>The <code class="language-plaintext highlighter-rouge">Commit</code> method tells the application to make permanent the effects of
the application transactions.
Let’s update the method to terminate the pending Badger transaction and
persist the resulting state:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">Commit</span><span class="p">()</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseCommit</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">app</span><span class="o">.</span><span class="n">onGoingBlock</span><span class="o">.</span><span class="n">Commit</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Panicf</span><span class="p">(</span><span class="s">"Error writing to database, unable to commit block: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseCommit</span><span class="p">{</span><span class="n">Data</span><span class="o">:</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">{}}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Finally, make sure to add the log library to the <code class="language-plaintext highlighter-rouge">import</code> stanza as well:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
	<span class="s">"bytes"</span>
	<span class="s">"log"</span>

	<span class="s">"github.com/dgraph-io/badger/v3"</span>
	<span class="n">abcitypes</span> <span class="s">"github.com/tendermint/tendermint/abci/types"</span>
<span class="p">)</span>
</code></pre></div></div>

<p>You may have noticed that the application we are writing will crash if it receives
an unexpected error from the Badger database during the <code class="language-plaintext highlighter-rouge">DeliverTx</code> or <code class="language-plaintext highlighter-rouge">Commit</code> methods.
This is not an accident. If the application received an error from the database, there
is no deterministic way for it to make progress so the only safe option is to terminate.</p>

<h3 id="134-query">1.3.4 Query</h3>

<p>When a client tries to read some information from the <code class="language-plaintext highlighter-rouge">kvstore</code>, the request will be
handled in the <code class="language-plaintext highlighter-rouge">Query</code> method. To do this, let’s rewrite the <code class="language-plaintext highlighter-rouge">Query</code> method in <code class="language-plaintext highlighter-rouge">app.go</code>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">Query</span><span class="p">(</span><span class="n">req</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestQuery</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseQuery</span> <span class="p">{</span>
	<span class="n">resp</span> <span class="o">:=</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseQuery</span><span class="p">{</span><span class="n">Key</span><span class="o">:</span> <span class="n">req</span><span class="o">.</span><span class="n">Data</span><span class="p">}</span>

	<span class="n">dbErr</span> <span class="o">:=</span> <span class="n">app</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">View</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">txn</span> <span class="o">*</span><span class="n">badger</span><span class="o">.</span><span class="n">Txn</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
		<span class="n">item</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">txn</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">Data</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">badger</span><span class="o">.</span><span class="n">ErrKeyNotFound</span> <span class="p">{</span>
				<span class="k">return</span> <span class="n">err</span>
			<span class="p">}</span>
			<span class="n">resp</span><span class="o">.</span><span class="n">Log</span> <span class="o">=</span> <span class="s">"key does not exist"</span>
			<span class="k">return</span> <span class="no">nil</span>
		<span class="p">}</span>

		<span class="k">return</span> <span class="n">item</span><span class="o">.</span><span class="n">Value</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">val</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
			<span class="n">resp</span><span class="o">.</span><span class="n">Log</span> <span class="o">=</span> <span class="s">"exists"</span>
			<span class="n">resp</span><span class="o">.</span><span class="n">Value</span> <span class="o">=</span> <span class="n">val</span>
			<span class="k">return</span> <span class="no">nil</span>
		<span class="p">})</span>
	<span class="p">})</span>
	<span class="k">if</span> <span class="n">dbErr</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Panicf</span><span class="p">(</span><span class="s">"Error reading database, unable to execute query: %v"</span><span class="p">,</span> <span class="n">dbErr</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">resp</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Since it reads only committed data from the store, transactions that are part of a block
that is being processed are not reflected in the query result.</p>

<h3 id="135-prepareproposal-and-processproposal">1.3.5 PrepareProposal and ProcessProposal</h3>

<p><code class="language-plaintext highlighter-rouge">PrepareProposal</code> and <code class="language-plaintext highlighter-rouge">ProcessProposal</code> are methods introduced in Tendermint v0.37.0
to give the application more control over the construction and processing of transaction blocks.</p>

<p>When Tendermint Core sees that valid transactions (validated through <code class="language-plaintext highlighter-rouge">CheckTx</code>) are available to be
included in blocks, it groups some of these transactions and then gives the application a chance
to modify the group by invoking <code class="language-plaintext highlighter-rouge">PrepareProposal</code>.</p>

<p>The application is free to modify the group before returning from the call, as long as the resulting set
does not use more bytes than `RequestPrepareProposal.max_tx_bytes’
For example, the application may reorder, add, or even remove transactions from the group to improve the
execution of the block once accepted.
In the following code, the application simply returns the unmodified group of transactions:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">PrepareProposal</span><span class="p">(</span><span class="n">proposal</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestPrepareProposal</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponsePrepareProposal</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponsePrepareProposal</span><span class="p">{</span><span class="n">Txs</span><span class="o">:</span> <span class="n">proposal</span><span class="o">.</span><span class="n">Txs</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Once a proposed block is received by a node, the proposal is passed to the application to give
its blessing before voting to accept the proposal.</p>

<p>This mechanism may be used for different reasons, for example to deal with blocks manipulated
by malicious nodes, in which case the block should not be considered valid.
The following code simply accepts all proposals:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">app</span> <span class="o">*</span><span class="n">KVStoreApplication</span><span class="p">)</span> <span class="n">ProcessProposal</span><span class="p">(</span><span class="n">proposal</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">RequestProcessProposal</span><span class="p">)</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseProcessProposal</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseProcessProposal</span><span class="p">{</span><span class="n">Status</span><span class="o">:</span> <span class="n">abcitypes</span><span class="o">.</span><span class="n">ResponseProcessProposal_ACCEPT</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="14-starting-an-application-and-a-tendermint-core-instance">1.4 Starting an application and a Tendermint Core instance</h2>

<p>Now that we have the basic functionality of our application in place, let’s put it all together inside of our <code class="language-plaintext highlighter-rouge">main.go</code> file.</p>

<p>Change the contents of your <code class="language-plaintext highlighter-rouge">main.go</code> file to the following.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"flag"</span>
	<span class="s">"fmt"</span>
	<span class="n">abciserver</span> <span class="s">"github.com/tendermint/tendermint/abci/server"</span>
	<span class="s">"log"</span>
	<span class="s">"os"</span>
	<span class="s">"os/signal"</span>
	<span class="s">"path/filepath"</span>
	<span class="s">"syscall"</span>

	<span class="s">"github.com/dgraph-io/badger/v3"</span>
	<span class="n">cmtlog</span> <span class="s">"github.com/tendermint/tendermint/libs/log"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="n">homeDir</span> <span class="kt">string</span>
<span class="k">var</span> <span class="n">socketAddr</span> <span class="kt">string</span>

<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">homeDir</span><span class="p">,</span> <span class="s">"kv-home"</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="s">"Path to the kvstore directory (if empty, uses $HOME/.kvstore)"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">socketAddr</span><span class="p">,</span> <span class="s">"socket-addr"</span><span class="p">,</span> <span class="s">"unix://example.sock"</span><span class="p">,</span> <span class="s">"Unix domain socket address (if empty, uses </span><span class="se">\"</span><span class="s">unix://example.sock</span><span class="se">\"</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
	<span class="k">if</span> <span class="n">homeDir</span> <span class="o">==</span> <span class="s">""</span> <span class="p">{</span>
		<span class="n">homeDir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">ExpandEnv</span><span class="p">(</span><span class="s">"$HOME/.kvstore"</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">dbPath</span> <span class="o">:=</span> <span class="n">filepath</span><span class="o">.</span><span class="n">Join</span><span class="p">(</span><span class="n">homeDir</span><span class="p">,</span> <span class="s">"badger"</span><span class="p">)</span>
	<span class="n">db</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">badger</span><span class="o">.</span><span class="n">Open</span><span class="p">(</span><span class="n">badger</span><span class="o">.</span><span class="n">DefaultOptions</span><span class="p">(</span><span class="n">dbPath</span><span class="p">))</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Opening database: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">db</span><span class="o">.</span><span class="n">Close</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Closing database: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="n">app</span> <span class="o">:=</span> <span class="n">NewKVStoreApplication</span><span class="p">(</span><span class="n">db</span><span class="p">)</span>

	<span class="n">logger</span> <span class="o">:=</span> <span class="n">cmtlog</span><span class="o">.</span><span class="n">NewTMLogger</span><span class="p">(</span><span class="n">cmtlog</span><span class="o">.</span><span class="n">NewSyncWriter</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">Stdout</span><span class="p">))</span>

	<span class="n">server</span> <span class="o">:=</span> <span class="n">abciserver</span><span class="o">.</span><span class="n">NewSocketServer</span><span class="p">(</span><span class="n">socketAddr</span><span class="p">,</span> <span class="n">app</span><span class="p">)</span>
	<span class="n">server</span><span class="o">.</span><span class="n">SetLogger</span><span class="p">(</span><span class="n">logger</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">server</span><span class="o">.</span><span class="n">Start</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Fprintf</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">Stderr</span><span class="p">,</span> <span class="s">"error starting socket server: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="n">os</span><span class="o">.</span><span class="n">Exit</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">server</span><span class="o">.</span><span class="n">Stop</span><span class="p">()</span>

	<span class="n">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
	<span class="n">signal</span><span class="o">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">Interrupt</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGTERM</span><span class="p">)</span>
	<span class="o">&lt;-</span><span class="n">c</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is a huge blob of code, so let’s break it down into pieces.</p>

<p>First, we initialize the Badger database and create an app instance:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">dbPath</span> <span class="o">:=</span> <span class="n">filepath</span><span class="o">.</span><span class="n">Join</span><span class="p">(</span><span class="n">homeDir</span><span class="p">,</span> <span class="s">"badger"</span><span class="p">)</span>
	<span class="n">db</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">badger</span><span class="o">.</span><span class="n">Open</span><span class="p">(</span><span class="n">badger</span><span class="o">.</span><span class="n">DefaultOptions</span><span class="p">(</span><span class="n">dbPath</span><span class="p">))</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Opening database: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">db</span><span class="o">.</span><span class="n">Close</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Closing database: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="n">app</span> <span class="o">:=</span> <span class="n">NewKVStoreApplication</span><span class="p">(</span><span class="n">db</span><span class="p">)</span>
</code></pre></div></div>

<p>Then we start the ABCI server and add some signal handling to gracefully stop
it upon receiving SIGTERM or Ctrl-C. Tendermint Core will act as a client,
which connects to our server and send us transactions and other messages.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">server</span> <span class="o">:=</span> <span class="n">abciserver</span><span class="o">.</span><span class="n">NewSocketServer</span><span class="p">(</span><span class="n">socketAddr</span><span class="p">,</span> <span class="n">app</span><span class="p">)</span>
	<span class="n">server</span><span class="o">.</span><span class="n">SetLogger</span><span class="p">(</span><span class="n">logger</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">server</span><span class="o">.</span><span class="n">Start</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Fprintf</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">Stderr</span><span class="p">,</span> <span class="s">"error starting socket server: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="n">os</span><span class="o">.</span><span class="n">Exit</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">server</span><span class="o">.</span><span class="n">Stop</span><span class="p">()</span>

	<span class="n">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
	<span class="n">signal</span><span class="o">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">Interrupt</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGTERM</span><span class="p">)</span>
	<span class="o">&lt;-</span><span class="n">c</span>
</code></pre></div></div>

<h2 id="15-initializing-and-running">1.5 Initializing and Running</h2>

<p>Our application is almost ready to run, but first we’ll need to populate the Tendermint Core configuration files.
The following command will create a <code class="language-plaintext highlighter-rouge">tendermint-home</code> directory in your project and add a basic set of configuration files in <code class="language-plaintext highlighter-rouge">tendermint-home/config/</code>.
For more information on what these files contain see <a href="https://github.com/tendermint/tendermint/blob/v0.37.0/docs/nodes/configuration.md">the configuration documentation</a>.</p>

<p>From the root of your project, run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run github.com/tendermint/tendermint/cmd/tendermint@v0.37.0 init <span class="nt">--home</span> /tmp/tendermint-home
</code></pre></div></div>

<p>You should see an output similar to the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I[2022-11-09|09:06:34.444] Generated private validator                  <span class="nv">module</span><span class="o">=</span>main <span class="nv">keyFile</span><span class="o">=</span>/tmp/tendermint-home/config/priv_validator_key.json <span class="nv">stateFile</span><span class="o">=</span>/tmp/tendermint-home/data/priv_validator_state.json
I[2022-11-09|09:06:34.444] Generated node key                           <span class="nv">module</span><span class="o">=</span>main <span class="nv">path</span><span class="o">=</span>/tmp/tendermint-home/config/node_key.json
I[2022-11-09|09:06:34.444] Generated genesis file                       <span class="nv">module</span><span class="o">=</span>main <span class="nv">path</span><span class="o">=</span>/tmp/tendermint-home/config/genesis.json
</code></pre></div></div>

<p>Now rebuild the app:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go build <span class="nt">-mod</span><span class="o">=</span>mod <span class="c"># use -mod=mod to automatically refresh the dependencies</span>
</code></pre></div></div>

<p>Everything is now in place to run your application. Run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./kvstore <span class="nt">-kv-home</span> /tmp/badger-home
</code></pre></div></div>

<p>The application will start and you should see an output similar to the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>badger 2022/11/09 17:01:28 INFO: All 0 tables opened <span class="k">in </span>0s
badger 2022/11/09 17:01:28 INFO: Discard stats nextEmptySlot: 0
badger 2022/11/09 17:01:28 INFO: Set nextTxnTs to 0
I[2022-11-09|17:01:28.726] service start                                <span class="nv">msg</span><span class="o">=</span><span class="s2">"Starting ABCIServer service"</span> <span class="nv">impl</span><span class="o">=</span>ABCIServer
I[2022-11-09|17:01:28.726] Waiting <span class="k">for </span>new connection...
</code></pre></div></div>

<p>Then we need to start Tendermint Core service and point it to our application.
Open a new terminal window and cd to the same folder where the app is running.
Then execute the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run github.com/tendermint/tendermint/cmd/tendermint@v0.37.0 node <span class="nt">--home</span> /tmp/tendermint-home <span class="nt">--proxy_app</span><span class="o">=</span>unix://example.sock
</code></pre></div></div>

<p>This should start the full node and connect to our ABCI application, which will be
reflected in the application output.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I[2022-11-09|17:07:08.124] service start                                <span class="nv">msg</span><span class="o">=</span><span class="s2">"Starting ABCIServer service"</span> <span class="nv">impl</span><span class="o">=</span>ABCIServer
I[2022-11-09|17:07:08.124] Waiting <span class="k">for </span>new connection...
I[2022-11-09|17:08:12.702] Accepted a new connection
I[2022-11-09|17:08:12.703] Waiting <span class="k">for </span>new connection...
I[2022-11-09|17:08:12.703] Accepted a new connection
I[2022-11-09|17:08:12.703] Waiting <span class="k">for </span>new connection...
</code></pre></div></div>

<p>Also, the application using Tendermint Core is producing blocks 🎉🎉 and you can see this reflected in the log output of the service in lines like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I[2022-11-09|09:08:52.147] received proposal                            <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">proposal</span><span class="o">=</span><span class="s2">"Proposal{2/0 (F518444C0E348270436A73FD0F0B9DFEA758286BEB29482F1E3BEA75330E825C:1:C73D3D1273F2, -1) AD19AE292A45 @ 2022-11-09T12:08:52.143393Z}"</span>
I[2022-11-09|09:08:52.152] received <span class="nb">complete </span>proposal block             <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">height</span><span class="o">=</span>2 <span class="nb">hash</span><span class="o">=</span>F518444C0E348270436A73FD0F0B9DFEA758286BEB29482F1E3BEA75330E825C
I[2022-11-09|09:08:52.160] finalizing commit of block                   <span class="nv">module</span><span class="o">=</span>consensus <span class="nv">height</span><span class="o">=</span>2 <span class="nb">hash</span><span class="o">=</span>F518444C0E348270436A73FD0F0B9DFEA758286BEB29482F1E3BEA75330E825C <span class="nv">root</span><span class="o">=</span> <span class="nv">num_txs</span><span class="o">=</span>0
I[2022-11-09|09:08:52.167] executed block                               <span class="nv">module</span><span class="o">=</span>state <span class="nv">height</span><span class="o">=</span>2 <span class="nv">num_valid_txs</span><span class="o">=</span>0 <span class="nv">num_invalid_txs</span><span class="o">=</span>0
I[2022-11-09|09:08:52.171] committed state                              <span class="nv">module</span><span class="o">=</span>state <span class="nv">height</span><span class="o">=</span>2 <span class="nv">num_txs</span><span class="o">=</span>0 <span class="nv">app_hash</span><span class="o">=</span>
</code></pre></div></div>

<p>The blocks, as you can see from the <code class="language-plaintext highlighter-rouge">num_valid_txs=0</code> part, are empty, but let’s remedy that next.</p>

<h2 id="16-using-the-application">1.6 Using the application</h2>

<p>Let’s try submitting a transaction to our new application.
Open another terminal window and run the following curl command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="s1">'localhost:26657/broadcast_tx_commit?tx="tendermint=rocks"'</span>
</code></pre></div></div>

<p>If everything went well, you should see a response indicating which height the
transaction was included in the blockchain.</p>

<p>Finally, let’s make sure that transaction really was persisted by the application.
Run the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="s1">'localhost:26657/abci_query?data="tendermint"'</span>
</code></pre></div></div>

<p>Let’s examine the response object that this request returns.
The request returns a <code class="language-plaintext highlighter-rouge">json</code> object with a <code class="language-plaintext highlighter-rouge">key</code> and <code class="language-plaintext highlighter-rouge">value</code> field set.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">...</span><span class="w">
	</span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"dGVuZGVybWludA=="</span><span class="err">,</span><span class="w">
	</span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cm9ja3M="</span><span class="err">,</span><span class="w">
</span><span class="err">...</span><span class="w">
</span></code></pre></div></div>

<p>Those values don’t look like the <code class="language-plaintext highlighter-rouge">key</code> and <code class="language-plaintext highlighter-rouge">value</code> we sent to Tendermint.
What’s going on here?</p>

<p>The response contains a <code class="language-plaintext highlighter-rouge">base64</code> encoded representation of the data we submitted.
To get the original value out of this data, we can use the <code class="language-plaintext highlighter-rouge">base64</code> command line utility:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span><span class="nv">cm9ja3M</span><span class="o">=</span><span class="s2">" | base64 -d
</span></code></pre></div></div>

<h2 id="outro">Outro</h2>

<p>I hope everything went smoothly and your first, but hopefully not the last,
Tendermint Core application is up and running. If not, please <a href="https://github.com/tendermint/tendermint/issues/new/choose">open an issue on
Github</a>. To dig
deeper, read <a href="https://docs.tendermint.com/main/">the docs</a>.</p>
:ET